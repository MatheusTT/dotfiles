#!/usr/bin/gjs -m
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);

// ../../../../../../../usr/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return Astal.Time.timeout(timeout2, () => void callback?.());
}

// ../../../../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal2.Process.execv(cmd) : Astal2.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec2, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec2 === "function") {
      this.pollFn = exec2;
      delete this.pollExec;
    } else {
      this.pollExec = exec2;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec2, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec2;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function hook(widget, object, signalOrCallback, callback) {
  if (typeof object.connect === "function" && callback) {
    const id = object.connect(signalOrCallback, (_, ...args) => {
      return callback(widget, ...args);
    });
    widget.connect("destroy", () => {
      object.disconnect(id);
    });
  } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
    const unsub = object.subscribe((...args) => {
      signalOrCallback(widget, ...args);
    });
    widget.connect("destroy", unsub);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../../../../usr/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";
function astalify(cls, clsName = cls.name) {
  class Widget extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this[noImplicitDestroy];
    }
    set noImplicitDestroy(value) {
      this[noImplicitDestroy] = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    getChildren() {
      if (this instanceof Gtk.Bin) {
        return this.get_child() ? [this.get_child()] : [];
      } else if (this instanceof Gtk.Container) {
        return this.get_children();
      }
      return [];
    }
    setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}`);
      }
    }
    [setChildren](children) {
      if (this instanceof Gtk.Container) {
        for (const ch of this.getChildren()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      this.setChildren(children);
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      hook(this, object, signalOrCallback, callback);
      return this;
    }
    constructor(...params) {
      super();
      const props = params[0] || {};
      props.visible ??= true;
      construct(this, props);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget);
  return Widget;
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth: Bluetooth3, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth3.prototype, "adapters");
  patch(Bluetooth3.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland2, Monitor, Workspace }) => {
  patch(Hyprland2.prototype, "binds");
  patch(Hyprland2.prototype, "monitors");
  patch(Hyprland2.prototype, "workspaces");
  patch(Hyprland2.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris4, Player }) => {
  patch(Mpris4.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd: Notifd4, Notification: Notification2 }) => {
  patch(Notifd4.prototype, "notifications");
  patch(Notification2.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio, Video }) => {
  patch(Wp2.prototype, "endpoints");
  patch(Wp2.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler: requestHandler2, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler2;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../../../usr/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../../../../../usr/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const ch = filter(children);
    this.startWidget = ch[0] || new Gtk3.Box();
    this.centerWidget = ch[1] || new Gtk3.Box();
    this.endWidget = ch[2] || new Gtk3.Box();
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
  setChildren(children) {
    this.label = String(children);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject3.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const [child, ...overlays] = filter(children);
    this.set_child(child);
    this.set_overlays(overlays);
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// ../../../../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../../../usr/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";
function readFileAsync(path) {
  return new Promise((resolve, reject) => {
    Astal8.read_file_async(path, (_, res) => {
      try {
        resolve(Astal8.read_file_finish(res) || "");
      } catch (error) {
        reject(error);
      }
    });
  });
}
function monitorFile(path, callback) {
  return Astal8.monitor_file(path, (file, event) => {
    callback(file, event);
  });
}

// ../../../../../../../usr/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;
var kebabify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
function register(options = {}) {
  return function(cls) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    GObject4.registerClass({
      Signals: { ...cls[meta]?.Signals },
      Properties: { ...cls[meta]?.Properties },
      ...options
    }, cls);
    delete cls[meta];
  };
}
function property(declaration = Object) {
  return function(target, prop, desc) {
    target.constructor[meta] ??= {};
    target.constructor[meta].Properties ??= {};
    const name = kebabify2(prop);
    if (!desc) {
      Object.defineProperty(target, prop, {
        get() {
          return this[priv]?.[prop] ?? defaultValue(declaration);
        },
        set(v) {
          if (v !== this[prop]) {
            this[priv] ??= {};
            this[priv][prop] = v;
            this.notify(name);
          }
        }
      });
      Object.defineProperty(target, `set_${name.replace("-", "_")}`, {
        value(v) {
          this[prop] = v;
        }
      });
      Object.defineProperty(target, `get_${name.replace("-", "_")}`, {
        value() {
          return this[prop];
        }
      });
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name, ParamFlags.READWRITE, declaration);
    } else {
      let flags = 0;
      if (desc.get) flags |= ParamFlags.READABLE;
      if (desc.set) flags |= ParamFlags.WRITABLE;
      target.constructor[meta].Properties[kebabify2(prop)] = pspec(name, flags, declaration);
    }
  };
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec)
    return declaration;
  switch (declaration) {
    case String:
      return ParamSpec.string(name, "", "", flags, "");
    case Number:
      return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
    case Boolean:
      return ParamSpec.boolean(name, "", "", flags, false);
    case Object:
      return ParamSpec.jsobject(name, "", "", flags);
    default:
      return ParamSpec.object(name, "", "", flags, declaration.$gtype);
  }
}
function defaultValue(declaration) {
  if (declaration instanceof ParamSpec)
    return declaration.get_default_value();
  switch (declaration) {
    case String:
      return "";
    case Number:
      return 0;
    case Boolean:
      return false;
    case Object:
    default:
      return null;
  }
}

// common/cssHotReload.ts
var TMP = "/tmp";
function compileScss() {
  try {
    exec(`sass ${"/home/broa/.config/ags"}/style.scss ${TMP}/style.css`);
    app_default.apply_css("/tmp/style.css");
    return `${TMP}/style.scss`;
  } catch (err) {
    printerr("Error compiling scss files.", err);
    return "";
  }
}
(function() {
  const scssFiles = exec(`find -L ${"/home/broa/.config/ags"} -iname '*.scss'`).split("\n");
  compileScss();
  scssFiles.forEach(
    (file) => monitorFile(file, compileScss)
  );
})();

// common/vars.ts
import Mpris from "gi://AstalMpris";
var showBar = Variable(true);
var showLeftSidebar = Variable(false);
var showRightSidebar = Variable(false);
var showCrosshair = Variable(false);
var showLauncher = Variable(false);
var doNotDisturb = Variable(false);
var nightLightEnabled = Variable(false);
var notificationsLength = Variable(0);
var spotifyPlayer = Mpris.Player.new("spotify");
execAsync("pgrep -x hyprsunset").then(() => nightLightEnabled.set(true)).catch(() => nightLightEnabled.set(false));
var currentTime = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format("%H:%M"));
var currentDay = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format("^%A, %d de ^%B"));
var uptime = Variable("").poll(5 * 60 * 1e3, async () => {
  const output = await execAsync("uptime -p");
  return output.replace(/ minutes| minute/, "m").replace(/ hours| hour/, "h").replace(/ days| day/, "d");
});
var memoryUsage = Variable("").poll(5 * 1e3, async () => {
  const output = await execAsync(["sh", "-c", `free --mega | awk 'NR==2{print $3 " MB"}'`]);
  return output;
});
var weatherReport = Variable(null).poll(20 * 60 * 1e3, async () => {
  try {
    const result = await execAsync(`curl -s "wttr.in/Curitiba?format=j1"`);
    const weather = JSON.parse(result);
    const timestamp = currentTime.get();
    return { timestamp, weather };
  } catch (err) {
    console.error("Error fetching weather:", err);
    return null;
  }
});

// windows/bar/Bar.tsx
import Battery from "gi://AstalBattery";
import Bluetooth from "gi://AstalBluetooth";
import Hyprland from "gi://AstalHyprland";
import Mpris2 from "gi://AstalMpris";
import Network from "gi://AstalNetwork";
import Tray from "gi://AstalTray";

// ../../../../../../../usr/share/astal/gjs/gtk3/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx2;

// widgets/Time/Time.tsx
function DigitStack(index) {
  return /* @__PURE__ */ jsx2(
    "stack",
    {
      transitionType: Gtk4.StackTransitionType.SLIDE_DOWN,
      transitionDuration: 500,
      visibleChildName: bind(currentTime).as((time) => time?.[index] ?? "0"),
      className: "DigitStack",
      children: Array.from({ length: 10 }, (_, i) => /* @__PURE__ */ jsx2("label", { name: i.toString(), label: i.toString() }))
    }
  );
}
function Time2() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "Time",
      halign: Gtk4.Align.CENTER,
      valign: Gtk4.Align.CENTER,
      children: [
        DigitStack(0),
        DigitStack(1),
        /* @__PURE__ */ jsx2("label", { label: ":", css: "font-family: 'JetBrainsMono Nerd Font'" }),
        DigitStack(3),
        DigitStack(4)
      ]
    }
  );
}

// common/functions.ts
function getWeatherEmoji(desc) {
  desc = desc.toLowerCase();
  if (desc.includes("sunny") || desc.includes("clear")) return "\u2600\uFE0F";
  if (desc.includes("partly")) return "\u26C5";
  if (desc.includes("cloudy") || desc.includes("overcast")) return "\u2601\uFE0F";
  if (desc.includes("rain") || desc.includes("drizzle")) return "\u{1F327}\uFE0F";
  if (desc.includes("thunder")) return "\u26C8\uFE0F";
  if (desc.includes("snow")) return "\u2744\uFE0F";
  if (desc.includes("fog") || desc.includes("mist")) return "\u{1F32B}\uFE0F";
  return "\u{1F308}";
}
function getWeatherImage(desc) {
  desc = desc.toLowerCase();
  if (desc.includes("sunny") || desc.includes("clear")) return "clear.png";
  if (desc.includes("partly")) return "partly_cloudy.png";
  if (desc.includes("cloudy") || desc.includes("overcast")) return "cloudy.png";
  if (desc.includes("light")) return "light_rain.png";
  if (desc.includes("rain") || desc.includes("drizzle")) return "rain.png";
  if (desc.includes("thunder")) return "storm.png";
  if (desc.includes("fog") || desc.includes("mist")) return "fog.png";
  return "other.png";
}
function getWifiIcon(icon) {
  if (icon.includes("offline")) return "\u{F092E}";
  if (icon.includes("no-route")) return "\u{F092D}";
  if (icon.includes("connected")) return "\u{F092B}";
  if (icon.includes("signal-none")) return "\u{F092F}";
  if (icon.includes("signal-weak")) return "\u{F091F}";
  if (icon.includes("signal-ok")) return "\u{F0922}";
  if (icon.includes("signal-good")) return "\u{F0925}";
  if (icon.includes("encrypted")) return "\u{F092A}";
  return "\u{F0928}";
}

// windows/bar/Bar.tsx
function SysTray() {
  const tray = Tray.get_default();
  return /* @__PURE__ */ jsx2("box", { className: "SysTray", children: bind(tray, "items").as((items) => items.map((item) => /* @__PURE__ */ jsx2(
    "menubutton",
    {
      tooltipMarkup: bind(item, "tooltipMarkup"),
      usePopover: false,
      actionGroup: bind(item, "actionGroup").as((ag) => ["dbusmenu", ag]),
      menuModel: bind(item, "menuModel"),
      children: /* @__PURE__ */ jsx2("icon", { gicon: bind(item, "gicon") })
    }
  ))) });
}
function NetworkModule() {
  const network = Network.get_default();
  const networkTypes = { "1": "wired", "2": "wifi" };
  return bind(network, "primary").as((p) => {
    const dev = network[networkTypes[p]];
    if (dev) {
      return /* @__PURE__ */ jsx2(
        "icon",
        {
          className: "Network",
          icon: bind(dev, "iconName")
        }
      );
    }
    return /* @__PURE__ */ jsx2("box", {});
  });
}
function BluetoothModule() {
  const bluetooth = Bluetooth.get_default();
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      transitionType: Gtk4.RevealerTransitionType.SLIDE_LEFT,
      revealChild: bind(bluetooth, "is_connected"),
      children: /* @__PURE__ */ jsx2("label", { className: "Bluetooth", label: "\u{F00B1}" })
    }
  );
}
function BatteryLevel() {
  const bat = Battery.get_default();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "Battery",
      visible: bind(bat, "isPresent"),
      children: [
        /* @__PURE__ */ jsx2("label", { label: bind(bat, "percentage").as((p) => `${Math.floor(p * 100)}%`) }),
        /* @__PURE__ */ jsx2("icon", { icon: bind(bat, "batteryIconName") })
      ]
    }
  );
}
function getTitle(player) {
  return player.artist ? `${player.artist}: ${player.title}` : player.album ? `${player.album}: ${player.title}` : `${player.title}`;
}
function Media() {
  const mpris = Mpris2.get_default();
  return bind(mpris, "players").as((ps) => ps[0] ? /* @__PURE__ */ jsx2(
    "button",
    {
      className: "Media",
      onClick: () => ps[0].play_pause(),
      children: /* @__PURE__ */ jsx2(
        "label",
        {
          className: bind(ps[0], "playbackStatus").as((s) => s > 0 ? "paused" : "playing"),
          truncate: true,
          maxWidthChars: 80,
          label: bind(ps[0], "metadata").as(() => getTitle(ps[0]))
        }
      )
    }
  ) : /* @__PURE__ */ jsx2("box", {}));
}
function Workspaces() {
  const hypr = Hyprland.get_default();
  return /* @__PURE__ */ jsx2("box", { className: "Workspaces", children: bind(hypr, "workspaces").as(
    (wss) => wss.filter((ws) => !(ws.id >= -99 && ws.id <= -2)).sort((a, b) => a.id - b.id).map((ws) => /* @__PURE__ */ jsx2(
      "button",
      {
        className: bind(hypr, "focusedWorkspace").as((fw) => ws === fw ? "focused" : ""),
        onClicked: () => ws.focus(),
        children: ws.id
      }
    ))
  ) });
}
function Weather() {
  const visible = Variable(false);
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
      revealChild: visible(),
      children: bind(weatherReport).as((data) => {
        if (data) {
          const condition = data.weather.current_condition[0];
          const temp = condition.temp_C;
          const emoji = getWeatherEmoji(condition.weatherDesc[0].value);
          visible.set(true);
          return /* @__PURE__ */ jsx2("label", { className: "Weather", label: `${temp}\xB0C ${emoji}` });
        }
        return /* @__PURE__ */ jsx2("box", {});
      })
    }
  );
}
function NotificationBell() {
  return /* @__PURE__ */ jsx2(
    "revealer",
    {
      transitionType: Gtk4.RevealerTransitionType.SLIDE_LEFT,
      revealChild: bind(notificationsLength).as((l) => l > 0),
      children: /* @__PURE__ */ jsx2("label", { className: "NotificationBell", label: "\u{F116B}" })
    }
  );
}
function Memory() {
  return /* @__PURE__ */ jsx2(
    "label",
    {
      className: "Memory",
      onDestroy: () => memoryUsage.drop(),
      label: memoryUsage()
    }
  );
}
function Bar(monitor, visible) {
  const { TOP, LEFT, RIGHT } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "Bar",
      namespace: "bar",
      gdkmonitor: monitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      application: app_default,
      visible: visible(),
      layer: Astal7.Layer.TOP,
      anchor: TOP | LEFT | RIGHT,
      children: /* @__PURE__ */ jsxs("centerbox", { children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            hexpand: true,
            halign: Gtk4.Align.START,
            css: "margin-left: 4px",
            children: [
              /* @__PURE__ */ jsx2(
                "button",
                {
                  className: "TimeAndWeather",
                  onClicked: () => showLeftSidebar.set(!showLeftSidebar.get()),
                  children: /* @__PURE__ */ jsxs("box", { children: [
                    /* @__PURE__ */ jsx2(Time2, {}),
                    /* @__PURE__ */ jsx2(Weather, {})
                  ] })
                }
              ),
              /* @__PURE__ */ jsx2(Workspaces, {})
            ]
          }
        ),
        /* @__PURE__ */ jsx2(Media, {}),
        /* @__PURE__ */ jsxs(
          "box",
          {
            hexpand: true,
            halign: Gtk4.Align.END,
            css: "margin-right: 4px",
            children: [
              /* @__PURE__ */ jsx2(SysTray, {}),
              /* @__PURE__ */ jsx2(
                "button",
                {
                  className: "TimeAndWeather",
                  onClicked: () => showRightSidebar.set(!showRightSidebar.get()),
                  children: /* @__PURE__ */ jsxs("box", { children: [
                    /* @__PURE__ */ jsx2(BatteryLevel, {}),
                    /* @__PURE__ */ jsx2(NetworkModule, {}),
                    /* @__PURE__ */ jsx2(BluetoothModule, {}),
                    /* @__PURE__ */ jsx2(NotificationBell, {}),
                    /* @__PURE__ */ jsx2(Memory, {})
                  ] })
                }
              )
            ]
          }
        )
      ] })
    }
  );
}

// windows/crosshair/Crosshair.tsx
function Crosshair(monitor, visible) {
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "Crosshair",
      namespace: "crosshair",
      gdkmonitor: monitor,
      visible: visible(),
      layer: Astal7.Layer.OVERLAY,
      application: app_default,
      exclusivity: Astal7.Exclusivity.IGNORE,
      keymode: Astal7.Keymode.NONE,
      canFocus: false,
      acceptFocus: false,
      children: /* @__PURE__ */ jsx2(
        "box",
        {
          className: "Dot"
        }
      )
    }
  );
}

// windows/launcher/Launcher.tsx
import Apps from "gi://AstalApps";
var MAX_ITEMS = 8;
function hide() {
  showLauncher.set(false);
}
function AppButton({ app }) {
  return /* @__PURE__ */ jsx2(
    "button",
    {
      className: "AppButton",
      onClicked: () => {
        hide();
        app.launch();
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2("icon", { icon: app.iconName }),
        /* @__PURE__ */ jsxs("box", { valign: Gtk4.Align.CENTER, vertical: true, children: [
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: "name",
              truncate: true,
              xalign: 0,
              label: app.name
            }
          ),
          app.description && /* @__PURE__ */ jsx2(
            "label",
            {
              className: "description",
              wrap: true,
              xalign: 0,
              label: app.description
            }
          )
        ] })
      ] })
    }
  );
}
function Launcher(monitor, visible) {
  const apps = new Apps.Apps();
  const width = Variable(1e3);
  const text = Variable("");
  const list = text((text2) => apps.fuzzy_query(text2).slice(0, MAX_ITEMS));
  const onEnter = () => {
    apps.fuzzy_query(text.get())?.[0].launch();
    hide();
  };
  return /* @__PURE__ */ jsx2(
    "window",
    {
      name: "launcher",
      exclusivity: Astal7.Exclusivity.IGNORE,
      keymode: Astal7.Keymode.ON_DEMAND,
      application: app_default,
      gdkmonitor: monitor,
      visible: visible(),
      onShow: (self) => {
        text.set("");
        width.set(self.get_current_monitor().workarea.width);
      },
      onKeyPressEvent: function(_, event) {
        if (event.get_keyval()[1] === Gdk.KEY_Escape)
          hide();
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2("eventbox", { widthRequest: width((w) => w / 2), expand: true, onClick: hide }),
        /* @__PURE__ */ jsxs("box", { hexpand: false, vertical: true, children: [
          /* @__PURE__ */ jsx2("eventbox", { heightRequest: 100, onClick: hide }),
          /* @__PURE__ */ jsxs("box", { widthRequest: 500, className: "Applauncher", vertical: true, children: [
            /* @__PURE__ */ jsx2(
              "entry",
              {
                placeholderText: "Search",
                text: text(),
                onChanged: (self) => {
                  if (self.text.startsWith(":e")) print("emoji");
                  return text.set(self.text);
                },
                onActivate: onEnter
              }
            ),
            /* @__PURE__ */ jsx2("box", { spacing: 6, vertical: true, children: list.as((list2) => list2.map((app) => /* @__PURE__ */ jsx2(AppButton, { app }))) }),
            /* @__PURE__ */ jsxs(
              "box",
              {
                halign: Gtk4.Align.CENTER,
                className: "not-found",
                vertical: true,
                visible: list.as((l) => l.length === 0),
                children: [
                  /* @__PURE__ */ jsx2("icon", { icon: "system-search-symbolic" }),
                  /* @__PURE__ */ jsx2("label", { label: "No match found" })
                ]
              }
            )
          ] }),
          /* @__PURE__ */ jsx2("eventbox", { expand: true, onClick: hide })
        ] }),
        /* @__PURE__ */ jsx2("eventbox", { widthRequest: width((w) => w / 2), expand: true, onClick: hide })
      ] })
    }
  );
}

// widgets/Calendar/Calendar.tsx
var Calendar = class extends astalify(Gtk4.Calendar) {
  static {
    GObject4.registerClass(this);
  }
  constructor(props) {
    super(props);
  }
};

// windows/left_sidebar/LeftSidebar.tsx
function TimeAndDate() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "TimeAndDate",
      vertical: true,
      children: [
        /* @__PURE__ */ jsx2(Time2, {}),
        /* @__PURE__ */ jsx2("label", { className: "Today", label: currentDay().as((day) => day.replace(/\^(\w)(\w*)/g, (_, first, rest) => first.toUpperCase() + rest.toLowerCase())) })
      ]
    }
  );
}
function CalendarModule() {
  return /* @__PURE__ */ jsx2("box", { className: "calendar", vertical: true, children: new Calendar({ hexpand: true, vexpand: true }) });
}
function getUpcomingHours(hourly) {
  const now = /* @__PURE__ */ new Date();
  const currentHour = now.getHours();
  const parsedHourly = hourly.map((h) => ({
    ...h,
    hour: Math.floor(Number(h.time) / 100)
  }));
  const startIdx = parsedHourly.findIndex((h) => h.hour > currentHour);
  const slice = parsedHourly.slice(startIdx, startIdx + 5);
  return slice.length === 5 ? slice : [...slice, ...parsedHourly.slice(0, 5 - slice.length)];
}
function WeatherSidebar() {
  return bind(weatherReport).as((data) => {
    if (!data) return /* @__PURE__ */ jsx2("box", {});
    const current = data.weather.current_condition[0];
    const upcoming = getUpcomingHours(data.weather.weather[0].hourly);
    const image = getWeatherImage(current.weatherDesc[0].value);
    return /* @__PURE__ */ jsxs(
      "box",
      {
        className: "Weather",
        vertical: true,
        children: [
          /* @__PURE__ */ jsx2(
            "box",
            {
              className: "Image",
              css: `background-image: url('${"/home/broa/.config/ags"}/assets/weather/${image}')`,
              children: /* @__PURE__ */ jsxs(
                "box",
                {
                  className: "Current",
                  children: [
                    /* @__PURE__ */ jsxs("box", { vertical: true, halign: Gtk4.Align.START, children: [
                      /* @__PURE__ */ jsx2(
                        "label",
                        {
                          className: "Icon",
                          xalign: 0,
                          yalign: 0,
                          vexpand: true,
                          label: getWeatherEmoji(current.weatherDesc[0].value)
                        }
                      ),
                      /* @__PURE__ */ jsx2(
                        "label",
                        {
                          className: "Description",
                          xalign: 0,
                          label: current.weatherDesc[0].value
                        }
                      )
                    ] }),
                    /* @__PURE__ */ jsx2("box", { hexpand: true }),
                    /* @__PURE__ */ jsxs("box", { vertical: true, halign: Gtk4.Align.END, children: [
                      /* @__PURE__ */ jsxs("box", { vertical: true, children: [
                        /* @__PURE__ */ jsx2(
                          "label",
                          {
                            className: "Temp",
                            xalign: 1,
                            yalign: 0,
                            label: `${current.temp_C}\xB0`
                          }
                        ),
                        /* @__PURE__ */ jsx2(
                          "label",
                          {
                            className: "FeelsLike",
                            xalign: 1,
                            yalign: 0,
                            vexpand: true,
                            label: `Feels like: ${current.FeelsLikeC}\xB0`
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsxs(
                        "box",
                        {
                          className: "Info",
                          vertical: true,
                          children: [
                            /* @__PURE__ */ jsx2("label", { className: "Wind", xalign: 1, label: `${current.windspeedKmph}km \u{1F4A8}` }),
                            /* @__PURE__ */ jsx2("label", { className: "Humidity", xalign: 1, label: `${current.humidity}% \u{1F4A7}` }),
                            /* @__PURE__ */ jsx2("label", { className: "Precipitation", xalign: 1, label: `${current.precipMM}mm \u2614` })
                          ]
                        }
                      )
                    ] })
                  ]
                }
              )
            }
          ),
          /* @__PURE__ */ jsx2(
            "box",
            {
              className: "HourlyForecast",
              homogeneous: true,
              children: upcoming.map((h) => /* @__PURE__ */ jsxs("box", { orientation: 1, hexpand: true, className: "HourlyItem", spacing: 4, children: [
                /* @__PURE__ */ jsx2("label", { label: `${h.hour.toString().padStart(2, "0")}:00`, className: "Hour" }),
                /* @__PURE__ */ jsx2(
                  "label",
                  {
                    label: getWeatherEmoji(h.weatherDesc[0].value),
                    className: "Icon",
                    tooltipText: `${h.weatherDesc[0].value}, \u2614: ${h.precipMM}mm`
                  }
                ),
                /* @__PURE__ */ jsx2("label", { label: `${h.tempC}\xB0`, className: "SmallTemp" })
              ] }))
            }
          )
        ]
      }
    );
  });
}
function LeftSidebar(monitor, visible) {
  const { LEFT, TOP } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "LeftSidebar",
      namespace: "leftsidebar",
      gdkmonitor: monitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      application: app_default,
      layer: Astal7.Layer.TOP,
      visible: visible(),
      anchor: TOP | LEFT,
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          hexpand: true,
          vertical: true,
          className: "sidebar",
          children: [
            /* @__PURE__ */ jsx2(TimeAndDate, {}),
            /* @__PURE__ */ jsx2(CalendarModule, {}),
            /* @__PURE__ */ jsx2(WeatherSidebar, {})
          ]
        }
      )
    }
  );
}

// windows/notification_popups/NotificationPopups.tsx
import Notifd2 from "gi://AstalNotifd";

// widgets/Notification/Notification.tsx
import Notifd from "gi://AstalNotifd";
var isIcon = (icon) => !!Astal7.Icon.lookup_icon(icon);
var fileExists = (path) => default2.file_test(path, default2.FileTest.EXISTS);
var formatTime = (time, format = "%H:%M") => default2.DateTime.new_from_unix_local(time).format(format);
var urgency = (n) => {
  const { LOW, NORMAL, CRITICAL } = Notifd.Urgency;
  switch (n.urgency) {
    case LOW:
      return "low";
    case CRITICAL:
      return "critical";
    case NORMAL:
    default:
      return "normal";
  }
};
function Notification(props) {
  const { notification: n, onHoverLost, setup } = props;
  const { START, CENTER, END } = Gtk4.Align;
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      hexpand: true,
      className: `Notification ${urgency(n)}`,
      setup,
      onHoverLost,
      children: /* @__PURE__ */ jsxs("box", { vertical: true, children: [
        /* @__PURE__ */ jsxs("box", { className: "header", children: [
          (n.appIcon || n.desktopEntry) && /* @__PURE__ */ jsx2(
            "icon",
            {
              className: "app-icon",
              visible: Boolean(n.appIcon || n.desktopEntry),
              icon: n.appIcon || n.desktopEntry
            }
          ),
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: "app-name",
              halign: START,
              truncate: true,
              label: n.appName || "Unknown"
            }
          ),
          /* @__PURE__ */ jsx2(
            "label",
            {
              className: "time",
              hexpand: true,
              halign: END,
              label: formatTime(n.time)
            }
          ),
          /* @__PURE__ */ jsx2("button", { onClicked: () => n.dismiss(), children: /* @__PURE__ */ jsx2("icon", { icon: "window-close-symbolic" }) })
        ] }),
        /* @__PURE__ */ jsx2(Gtk4.Separator, { visible: true }),
        /* @__PURE__ */ jsxs("box", { className: "content", children: [
          n.image && fileExists(n.image) && /* @__PURE__ */ jsx2(
            "box",
            {
              valign: START,
              className: "image",
              css: `background-image: url('${n.image}')`
            }
          ),
          n.image && isIcon(n.image) && /* @__PURE__ */ jsx2(
            "box",
            {
              expand: false,
              valign: START,
              className: "icon-image",
              children: /* @__PURE__ */ jsx2("icon", { icon: n.image, expand: true, halign: CENTER, valign: CENTER })
            }
          ),
          /* @__PURE__ */ jsxs("box", { vertical: true, children: [
            /* @__PURE__ */ jsx2(
              "label",
              {
                className: "summary",
                halign: START,
                xalign: 0,
                label: n.summary,
                truncate: true
              }
            ),
            n.body && /* @__PURE__ */ jsx2(
              "label",
              {
                className: "body",
                wrap: true,
                useMarkup: false,
                halign: START,
                xalign: 0,
                label: n.body
              }
            )
          ] })
        ] }),
        n.get_actions().length > 0 && /* @__PURE__ */ jsx2("box", { className: "actions", children: n.get_actions().map(({ label, id }) => /* @__PURE__ */ jsx2(
          "button",
          {
            hexpand: true,
            onClicked: () => n.invoke(id),
            children: /* @__PURE__ */ jsx2("label", { label, halign: CENTER, hexpand: true })
          }
        )) })
      ] })
    }
  );
}

// windows/notification_popups/NotificationPopups.tsx
var TIMEOUT_DELAY = 5e3;
var NotifiationMap = class {
  // the underlying map to keep track of id widget pairs
  map = /* @__PURE__ */ new Map();
  // it makes sense to use a Variable under the hood and use its
  // reactivity implementation instead of keeping track of subscribers ourselves
  var = Variable([]);
  // notify subscribers to rerender when state changes
  notifiy() {
    this.var.set([...this.map.values()]);
  }
  constructor() {
    const notifd = Notifd2.get_default();
    notifd.connect("notified", (_, id) => {
      this.set(id, Notification({
        notification: notifd.get_notification(id),
        // once hovering over the notification is done
        // destroy the widget without calling notification.dismiss()
        // so that it acts as a "popup" and we can still display it
        // in a notification center like widget
        // but clicking on the close button will close it
        onHoverLost: () => this.delete(id),
        // notifd by default does not close notifications
        // until user input or the timeout specified by sender
        // which we set to ignore above
        setup: () => timeout(TIMEOUT_DELAY, () => {
          this.delete(id);
        })
      }));
    });
    notifd.connect("resolved", (_, id) => {
      this.delete(id);
    });
  }
  set(key, value) {
    this.map.get(key)?.destroy();
    this.map.set(key, value);
    this.notifiy();
  }
  delete(key) {
    this.map.get(key)?.destroy();
    this.map.delete(key);
    this.notifiy();
  }
  // needed by the Subscribable interface
  get() {
    return this.var.get();
  }
  // needed by the Subscribable interface
  subscribe(callback) {
    return this.var.subscribe(callback);
  }
};
function NotificationPopups(gdkmonitor, visible) {
  const { BOTTOM, RIGHT } = Astal7.WindowAnchor;
  const notifs = new NotifiationMap();
  return /* @__PURE__ */ jsx2(
    "window",
    {
      hexpand: true,
      className: "NotificationPopups",
      namespace: "notification",
      gdkmonitor,
      visible: bind(visible).as((v) => !v),
      exclusivity: Astal7.Exclusivity.IGNORE,
      application: app_default,
      layer: Astal7.Layer.OVERLAY,
      anchor: BOTTOM | RIGHT,
      children: /* @__PURE__ */ jsx2("box", { vertical: true, children: bind(notifs) })
    }
  );
}

// windows/osd/OSD.tsx
import Wp from "gi://AstalWp";

// utils/brightness.ts
var get = (args) => Number(exec(`brightnessctl ${args}`));
var screen = exec(`bash -c "ls -w1 /sys/class/backlight | head -1"`);
var _screenMax, _screen;
var Brightness = class extends GObject4.Object {
  constructor() {
    super();
    __privateAdd(this, _screenMax, get("max"));
    __privateAdd(this, _screen, get("get") / (get("max") || 1));
    monitorFile(`/sys/class/backlight/${screen}/brightness`, async (f) => {
      const v = await readFileAsync(f);
      __privateSet(this, _screen, Number(v) / __privateGet(this, _screenMax));
      this.notify("screen");
    });
  }
  static get_default() {
    if (!this.instance)
      this.instance = new Brightness();
    return this.instance;
  }
  get screen() {
    return __privateGet(this, _screen);
  }
  set screen(percent) {
    if (percent < 0)
      percent = 0;
    if (percent > 1)
      percent = 1;
    execAsync(`brightnessctl set ${Math.floor(percent * 100)}% -q`).then(() => {
      __privateSet(this, _screen, percent);
      this.notify("screen");
    });
  }
};
_screenMax = new WeakMap();
_screen = new WeakMap();
__publicField(Brightness, "instance");
__decorateClass([
  property(Number)
], Brightness.prototype, "screen", 1);
Brightness = __decorateClass([
  register({ GTypeName: "Brightness" })
], Brightness);

// windows/osd/OSD.tsx
function OnScreenProgress({ visible }) {
  const brightness = Brightness.get_default();
  const speaker = Wp.get_default().get_default_speaker();
  const iconName = variable_default("");
  const value = variable_default(0);
  let count = 0;
  function show(v, icon) {
    visible.set(true);
    value.set(v);
    iconName.set(icon);
    count++;
    timeout(2e3, () => {
      count--;
      if (count === 0) visible.set(false);
    });
  }
  return /* @__PURE__ */ jsx2(
    "box",
    {
      setup: (self) => {
        self.hook(
          brightness,
          "notify::screen",
          () => show(brightness.screen, "display-brightness-symbolic")
        );
        if (speaker) {
          self.hook(
            speaker,
            "notify::volume",
            () => show(speaker.volume, speaker.volumeIcon)
          );
        }
        self.hook(
          spotifyPlayer,
          "notify::volume",
          () => show(spotifyPlayer.volume, "spotify")
        );
      },
      children: /* @__PURE__ */ jsxs("box", { vertical: true, className: "OSD", children: [
        /* @__PURE__ */ jsx2("icon", { icon: iconName() }),
        /* @__PURE__ */ jsx2(
          "levelbar",
          {
            valign: Gtk4.Align.CENTER,
            heightRequest: 100,
            widthRequest: 8,
            vertical: true,
            inverted: true,
            value: value()
          }
        ),
        /* @__PURE__ */ jsx2("label", { label: value((v) => `${Math.floor(v * 100)}%`) })
      ] })
    }
  );
}
function OSD(monitor) {
  const visible = variable_default(false);
  return /* @__PURE__ */ jsx2(
    "window",
    {
      gdkmonitor: monitor,
      className: "OSD",
      namespace: "osd",
      application: app_default,
      visible: visible(),
      layer: Astal7.Layer.OVERLAY,
      anchor: Astal7.WindowAnchor.RIGHT,
      children: /* @__PURE__ */ jsx2("eventbox", { onClick: () => visible.set(false), children: /* @__PURE__ */ jsx2(OnScreenProgress, { visible }) })
    }
  );
}

// windows/right_sidebar/RightSidebar.tsx
import Bluetooth2 from "gi://AstalBluetooth";
import Mpris3 from "gi://AstalMpris";
import Network2 from "gi://AstalNetwork";
import Notifd3 from "gi://AstalNotifd";

// widgets/MediaPlayer/MediaPlayer.tsx
function lengthStr(length) {
  const min = Math.floor(length / 60);
  const sec = Math.floor(length % 60);
  const sec0 = sec < 10 ? "0" : "";
  return `${min}:${sec0}${sec}`;
}
function MediaPlayer(player) {
  const showPosition = variable_default(false);
  const coverArt = bind(player, "coverArt").as((c) => `background-image: url('${c}')`);
  const playIcon = bind(player, "playbackStatus").as((s) => s === 0 ? "\u{F03E4}" : "\u{F040A}");
  const position = bind(player, "position").as((p) => player.length > 0 ? p / player.length : 0);
  function ArtistTitle() {
    return /* @__PURE__ */ jsxs("box", { vertical: true, hexpand: true, children: [
      /* @__PURE__ */ jsx2(
        "label",
        {
          className: "Title",
          truncate: true,
          maxWidthChars: 35,
          halign: Gtk4.Align.START,
          valign: Gtk4.Align.START,
          label: bind(player, "metadata").as(() => `${player.title}`)
        }
      ),
      /* @__PURE__ */ jsx2(
        "label",
        {
          className: "Artist",
          vexpand: true,
          halign: Gtk4.Align.START,
          valign: Gtk4.Align.START,
          label: bind(player, "metadata").as(() => {
            if (player.artist) return `${player.artist}`;
            if (player.album) return `${player.album}`;
            return "";
          })
        }
      )
    ] });
  }
  function Position() {
    return /* @__PURE__ */ jsx2(
      "revealer",
      {
        revealChild: bind(showPosition),
        transitionType: Gtk4.RevealerTransitionType.SLIDE_DOWN,
        children: /* @__PURE__ */ jsxs("box", { vertical: true, className: "position", children: [
          /* @__PURE__ */ jsxs("box", { children: [
            /* @__PURE__ */ jsx2(
              "label",
              {
                halign: Gtk4.Align.START,
                visible: bind(player, "length").as((l) => l > 0),
                label: bind(player, "position").as(lengthStr)
              }
            ),
            /* @__PURE__ */ jsx2(
              "label",
              {
                hexpand: true,
                halign: Gtk4.Align.START,
                visible: bind(player, "length").as((l) => l > 0),
                label: bind(player, "length").as((l) => l > 0 ? ` - ${lengthStr(l)}` : " - 0:00")
              }
            )
          ] }),
          /* @__PURE__ */ jsx2(
            "slider",
            {
              visible: bind(player, "length").as((l) => l > 0),
              onDragged: ({ value }) => player.position = value * player.length,
              value: position
            }
          )
        ] })
      }
    );
  }
  function Actions2() {
    return /* @__PURE__ */ jsxs(
      "box",
      {
        className: "Actions",
        homogeneous: true,
        vertical: true,
        children: [
          /* @__PURE__ */ jsx2(
            "button",
            {
              label: "\u{F04AE}",
              onClicked: () => player.previous()
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              label: playIcon,
              onClick: () => player.play_pause()
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              label: "\u{F04AD}",
              onClicked: () => player.next()
            }
          )
        ]
      }
    );
  }
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      onHover: () => showPosition.set(true),
      onHoverLost: () => showPosition.set(false),
      children: /* @__PURE__ */ jsxs("box", { className: "MediaPlayer", children: [
        /* @__PURE__ */ jsx2(
          "box",
          {
            className: "Cover",
            hexpand: true,
            widthRequest: 300,
            css: coverArt,
            children: /* @__PURE__ */ jsxs(
              "box",
              {
                className: "Description",
                vertical: true,
                children: [
                  /* @__PURE__ */ jsx2(ArtistTitle, {}),
                  /* @__PURE__ */ jsx2(Position, {})
                ]
              }
            )
          }
        ),
        /* @__PURE__ */ jsx2(Actions2, {})
      ] })
    }
  );
}

// windows/right_sidebar/RightSidebar.tsx
function UserModule() {
  const userName = exec("whoami");
  const userImg = `${"/home/broa/.config/ags"}/assets/profile.png`;
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "UserModule",
      children: [
        /* @__PURE__ */ jsx2("box", { className: "UserImg", css: `background-image: url('${userImg}')` }),
        /* @__PURE__ */ jsxs("box", { vertical: true, valign: Gtk4.Align.CENTER, children: [
          /* @__PURE__ */ jsx2("label", { className: "Username", label: userName, halign: Gtk4.Align.START }),
          /* @__PURE__ */ jsx2("label", { className: "Uptime", label: uptime(), halign: Gtk4.Align.START })
        ] })
      ]
    }
  );
}
function newSidebarButton(icon, name, status) {
  return /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2("label", { className: "Icon", label: icon }),
    /* @__PURE__ */ jsxs(
      "box",
      {
        className: "Description",
        vertical: true,
        valign: Gtk4.Align.CENTER,
        children: [
          /* @__PURE__ */ jsx2("label", { halign: Gtk4.Align.START, label: name }),
          /* @__PURE__ */ jsx2("label", { halign: Gtk4.Align.START, label: status })
        ]
      }
    )
  ] });
}
function WifiModule() {
  const network = Network2.get_default();
  return /* @__PURE__ */ jsx2("box", { className: "Wifi", halign: Gtk4.Align.CENTER, children: bind(network, "wifi").as(
    (wifi) => /* @__PURE__ */ jsx2("box", { children: bind(wifi, "enabled").as((enabled) => {
      const icon = bind(wifi, "iconName").as(getWifiIcon);
      const name = enabled ? bind(wifi, "ssid").as((ssid) => ssid || "Wifi") : "Wifi";
      const status = enabled ? "on" : "off";
      return /* @__PURE__ */ jsx2(
        "button",
        {
          className: enabled ? "enabled" : "disabled",
          onClicked: () => wifi.set_enabled(!enabled),
          children: newSidebarButton(icon, name, status)
        }
      );
    }) })
  ) });
}
function BluetoothModule2() {
  const bluetooth = Bluetooth2.get_default();
  function getConnectedDevice(enabled) {
    for (const device of bluetooth.get_devices()) {
      if (device.connected) {
        const name2 = device.name;
        const status2 = bind(device, "batteryPercentage").as((p) => p > 0 ? `${Math.floor(p * 100)}%` : enabled ? "on" : "off");
        return { name: name2, status: status2 };
      }
    }
    const name = "Bluetooth";
    const status = enabled ? "on" : "off";
    return { name, status };
  }
  return /* @__PURE__ */ jsx2("box", { className: "Bluetooth", halign: Gtk4.Align.CENTER, children: bind(bluetooth, "isPowered").as((powered) => /* @__PURE__ */ jsx2(
    "button",
    {
      className: powered ? "enabled" : "disabled",
      onClicked: () => exec("rfkill toggle bluetooth"),
      children: bind(bluetooth, "isConnected").as((conn) => {
        const icon = conn ? "\u{F00B1}" : "\u{F00AF}";
        const { name, status } = getConnectedDevice(powered);
        return newSidebarButton(icon, name, status);
      })
    }
  )) });
}
function DoNotDisturbModule() {
  const icon = "\u{F0376}";
  const name = "Do Not Disturb";
  return bind(doNotDisturb).as((dnd) => {
    const status = dnd ? "on" : "off";
    return /* @__PURE__ */ jsx2(
      "box",
      {
        className: "doNotDisturb",
        halign: Gtk4.Align.CENTER,
        children: /* @__PURE__ */ jsx2(
          "button",
          {
            className: dnd ? "enabled" : "disabled",
            onClicked: () => doNotDisturb.set(!dnd),
            children: newSidebarButton(icon, name, status)
          }
        )
      }
    );
  });
}
function toggleNightLight() {
  if (nightLightEnabled.get()) {
    execAsync("pkill hyprsunset");
    nightLightEnabled.set(false);
  } else {
    execAsync("bash -c 'hyprsunset -t 5000 & disown'");
    nightLightEnabled.set(true);
  }
}
function NightLightModule() {
  const name = "Night Light";
  return bind(nightLightEnabled).as((enabled) => {
    const icon = enabled ? "\u{F1A4C}" : "\u{F0336}";
    const status = enabled ? "on" : "off";
    return /* @__PURE__ */ jsx2(
      "box",
      {
        className: "nightLight",
        halign: Gtk4.Align.CENTER,
        children: /* @__PURE__ */ jsx2(
          "button",
          {
            className: enabled ? "enabled" : "disabled",
            onClicked: toggleNightLight,
            children: newSidebarButton(icon, name, status)
          }
        )
      }
    );
  });
}
function NotificationList() {
  const notifd = Notifd3.get_default();
  return /* @__PURE__ */ jsx2("box", { className: "NotificationList", children: bind(notifd, "notifications").as((notifs) => {
    const nLength = notifs.length;
    notificationsLength.set(nLength);
    const boxHeight = nLength > 0 ? 400 : 300;
    return /* @__PURE__ */ jsxs(
      "box",
      {
        vertical: true,
        heightRequest: boxHeight,
        widthRequest: 300,
        children: [
          /* @__PURE__ */ jsxs("box", { children: [
            /* @__PURE__ */ jsx2("label", { className: "Title", label: "Notifications" }),
            /* @__PURE__ */ jsx2(
              "button",
              {
                className: "dismissAll",
                halign: Gtk4.Align.END,
                hexpand: true,
                label: "Clear All",
                onClicked: () => notifs.forEach((n) => n.dismiss())
              }
            )
          ] }),
          nLength > 0 ? /* @__PURE__ */ jsx2("scrollable", { vexpand: true, children: /* @__PURE__ */ jsx2("box", { vertical: true, children: notifs.reverse().map((n) => {
            return Notification({
              notification: n,
              setup: () => {
              },
              onHoverLost: () => {
              }
            });
          }) }) }) : /* @__PURE__ */ jsxs(
            "box",
            {
              className: "noNotifications",
              vexpand: true,
              hexpand: true,
              vertical: true,
              valign: Gtk4.Align.CENTER,
              children: [
                /* @__PURE__ */ jsx2("label", { label: "\u{F13EC}", className: "Icon" }),
                /* @__PURE__ */ jsx2("label", { label: "no notifications :(" })
              ]
            }
          )
        ]
      }
    );
  }) });
}
function actionButton(icon, className, exec2) {
  return /* @__PURE__ */ jsx2("box", { className, children: /* @__PURE__ */ jsx2(
    "button",
    {
      onClicked: () => execAsync(exec2),
      label: icon
    }
  ) });
}
function Actions() {
  return /* @__PURE__ */ jsxs("box", { className: "sidebarActions", children: [
    actionButton("\u{F033E}", "lock", "~/scripts/wayland/lock"),
    actionButton("\u{F0904}", "hibernate", "systemctl hibernate; ~/scripts/wayland/lock"),
    actionButton("\u{F0425}", "poweroff", "poweroff")
  ] });
}
function ScrollableMediaPlayers() {
  const mpris = Mpris3.get_default();
  const currentPlayer = Variable(0);
  const playersLenght = Variable(0);
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      onScroll: (_, event) => {
        const delta_y = event.delta_y;
        const current = currentPlayer.get();
        const max = playersLenght.get() - 1;
        if (delta_y < 0) {
          if (current < max) currentPlayer.set(current + 1);
        } else {
          if (current > 0) currentPlayer.set(current - 1);
        }
      },
      children: bind(mpris, "players").as((ps) => {
        playersLenght.set(ps.length);
        if (ps.length > 0) return /* @__PURE__ */ jsxs("box", { vertical: true, children: [
          /* @__PURE__ */ jsx2(
            "stack",
            {
              transitionType: Gtk4.StackTransitionType.SLIDE_LEFT_RIGHT,
              transitionDuration: 300,
              visibleChildName: bind(currentPlayer).as((current) => ps[current].entry),
              children: ps.map((player) => {
                return /* @__PURE__ */ jsx2("box", { name: player.entry, children: MediaPlayer(player) });
              })
            }
          ),
          /* @__PURE__ */ jsx2(
            "box",
            {
              className: "playersButtons",
              halign: Gtk4.Align.CENTER,
              visible: ps.length > 1 ? true : false,
              children: ps.map((player) => /* @__PURE__ */ jsx2(
                "button",
                {
                  className: bind(currentPlayer).as(
                    (current) => ps[current].entry == player.entry ? "enabled" : "disabled"
                  ),
                  onClicked: () => currentPlayer.set(ps.indexOf(player)),
                  children: /* @__PURE__ */ jsx2("icon", { icon: player.entry.replace(/zen/, "zen-browser") })
                }
              ))
            }
          )
        ] });
        return /* @__PURE__ */ jsx2("box", {});
      })
    }
  );
}
function RightSidebar(monitor, visible) {
  const { TOP, RIGHT } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "RightSidebar",
      namespace: "rightsidebar",
      gdkmonitor: monitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      application: app_default,
      visible: visible(),
      layer: Astal7.Layer.TOP,
      anchor: TOP | RIGHT,
      children: /* @__PURE__ */ jsxs(
        "box",
        {
          vertical: true,
          className: "sidebar",
          children: [
            /* @__PURE__ */ jsxs("box", { children: [
              /* @__PURE__ */ jsx2(UserModule, {}),
              /* @__PURE__ */ jsx2("box", { hexpand: true }),
              /* @__PURE__ */ jsx2(Actions, {})
            ] }),
            /* @__PURE__ */ jsxs("box", { children: [
              /* @__PURE__ */ jsx2(WifiModule, {}),
              /* @__PURE__ */ jsx2("box", { widthRequest: 8 }),
              /* @__PURE__ */ jsx2(BluetoothModule2, {})
            ] }),
            /* @__PURE__ */ jsxs("box", { children: [
              /* @__PURE__ */ jsx2(DoNotDisturbModule, {}),
              /* @__PURE__ */ jsx2("box", { widthRequest: 8 }),
              /* @__PURE__ */ jsx2(NightLightModule, {})
            ] }),
            /* @__PURE__ */ jsx2(ScrollableMediaPlayers, {}),
            /* @__PURE__ */ jsx2(NotificationList, {})
          ]
        }
      )
    }
  );
}

// requestHandler.ts
function handleRevealer(command, revealer) {
  switch (command) {
    case 2 /* TOGGLE */:
      revealer.set(!revealer.get());
      return `${revealer.get()}`;
    default:
      return "Unknown reveal command.";
  }
}
function requestHandler(request, res) {
  const args = request.split(":");
  switch (args[0]) {
    case "bar":
      switch (args[1]) {
        case "toggle":
          return res(handleRevealer(2 /* TOGGLE */, showBar));
        default:
          return res("Unknown command for bar.");
      }
    case "leftsidebar":
      switch (args[1]) {
        case "toggle":
          return res(handleRevealer(2 /* TOGGLE */, showLeftSidebar));
        default:
          return res("Unknown command for leftsidebar.");
      }
    case "rightsidebar":
      switch (args[1]) {
        case "toggle":
          return res(handleRevealer(2 /* TOGGLE */, showRightSidebar));
        default:
          return res("Unknown command for rightsidebar.");
      }
    case "launcher":
      switch (args[1]) {
        case "toggle":
          return res(handleRevealer(2 /* TOGGLE */, showLauncher));
        default:
          return res("Unknown command for launcher.");
      }
    case "crosshair":
      switch (args[1]) {
        case "toggle":
          return res(handleRevealer(2 /* TOGGLE */, showCrosshair));
        default:
          return res("Unknown command for crosshair.");
      }
    default:
      return res("Unknown request.");
  }
}

// app.ts
function getTargetMonitor(monitors) {
  const notebookModel = "0x9051";
  const pcModel = "24G2W1G4";
  const notebookMonitor = monitors.find((m) => m.model === notebookModel);
  const pcMonitor = monitors.find((m) => m.model === pcModel);
  return notebookMonitor || pcMonitor || monitors[0];
}
app_default.start({
  css: compileScss(),
  requestHandler,
  main() {
    const monitors = app_default.get_monitors();
    const targetMonitor = getTargetMonitor(monitors);
    Bar(targetMonitor, showBar);
    LeftSidebar(targetMonitor, showLeftSidebar);
    RightSidebar(targetMonitor, showRightSidebar);
    Crosshair(targetMonitor, showCrosshair);
    OSD(targetMonitor);
    NotificationPopups(targetMonitor, doNotDisturb);
    Launcher(targetMonitor, showLauncher);
    print(`
Astal Windows applied on monitor: ${targetMonitor.model}`);
  }
});
//# sourceMappingURL=data:application/json;base64,
